[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$TransposeFromListInt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifList,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$TransposeFromListInt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$TransposeFromListInt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$TransposeFromListInt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Transpose$TransAllDT$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(whileDmLessThanPass,[Implicit]), UsedName(dmEqualsPass,[Implicit]), UsedName(psEqualsZero,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Transpose$TransAllDT$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Transpose$TransAllDT$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Transpose$TransAllDT$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportdate.IsSportDateInstances$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nScalaTimeDate,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportdate.IsSportDateInstances$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportdate.IsSportDateInstances$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportdate.IsSportDateInstances$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.Dummy[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Transpose$TransAxDT has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifCurrDimIsNotXA,[Implicit]), UsedName(ifCurrDimIsXA,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Transpose$TransAxDT: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Transpose$TransAxDT.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Transpose$TransAxDT are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.Skeleton$IsBase has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(sportarray;Skeleton;IsBase;init;,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(IsBase,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.Skeleton$IsBase: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.Skeleton$IsBase.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.Dummy: Set(UsedName(IsBase,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$SubArrays has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(go,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$SubArrays: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$SubArrays.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$SubArrays are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$FromElemsAndArrayOpt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifArray,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$FromElemsAndArrayOpt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$FromElemsAndArrayOpt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$FromElemsAndArrayOpt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportdate.IsSportDateInstances has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nScalaTimeDate,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportdate.IsSportDateInstances: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportdate.IsSportDateInstances.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportdate.IsSportDateInstances are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.Dummy[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$OperateOpt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifBothBase,[Implicit]), UsedName(ifSameDepthArrs,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$OperateOpt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$OperateOpt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$OperateOpt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.Skeleton$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(IsBase,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Skeleton,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.Skeleton$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.Skeleton$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.Dummy: Set(UsedName(IsBase,[Default]), UsedName(==,[Default]), UsedName(Skeleton,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ConcatenateOpt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifNoSubConc,[Implicit]), UsedName(ifSubConc,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ConcatenateOpt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ConcatenateOpt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ConcatenateOpt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$FromElemsAndSubArraysOpt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifShapeIsHNil,[Implicit]), UsedName(ifShapeIsNotHNil,[Implicit]), UsedName(ifArraysDescending,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$FromElemsAndSubArraysOpt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$FromElemsAndSubArraysOpt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$FromElemsAndSubArraysOpt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Depth$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifArr,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Depth$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Depth$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Depth$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$TransposeAxRT$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifTupleInt,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$TransposeAxRT$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$TransposeAxRT$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$TransposeAxRT$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ExpandShapeDims$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHeadIsFalse,[Implicit]), UsedName(ifHNil,[Implicit]), UsedName(ifHeadIsTrue,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ExpandShapeDims$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ExpandShapeDims$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ExpandShapeDims$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Where has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifArray,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Where: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Where.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Where are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$SubArrays$GetARDesc$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifSIsEle,[Implicit]), UsedName(ifSIsArr,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$SubArrays$GetARDesc$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$SubArrays$GetARDesc$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$SubArrays$GetARDesc$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$OperateOpt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifBothBase,[Implicit]), UsedName(ifSameDepthArrs,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$OperateOpt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$OperateOpt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$OperateOpt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ConcatenateOpt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifNoSubConc,[Implicit]), UsedName(ifSubConc,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ConcatenateOpt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ConcatenateOpt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ConcatenateOpt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$PrettyPrint has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifIs1dp,[Implicit]), UsedName(ifIs1d,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$PrettyPrint: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$PrettyPrint.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$PrettyPrint are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$SubArrays$GetARDesc has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifSIsEle,[Implicit]), UsedName(ifSIsArr,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$SubArrays$GetARDesc: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$SubArrays$GetARDesc.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$SubArrays$GetARDesc are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Concatenate has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifDim0,[Implicit]), UsedName(ifNotDim0,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Concatenate: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Concatenate.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Concatenate are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$SetElem$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHListIntIsArr,[Implicit]), UsedName(ifHListIntIsBase,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$SetElem$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$SetElem$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$SetElem$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ExpandDims$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHListBool,[Implicit]), UsedName(ifDepthmatches,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ExpandDims$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ExpandDims$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ExpandDims$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$AddOpt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifSameType,[Implicit]), UsedName(ifDiffType,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$AddOpt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$AddOpt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$AddOpt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Concatenate$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifDim0,[Implicit]), UsedName(ifNotDim0,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Concatenate$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Concatenate$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Concatenate$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$TransposeAxRT has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifTupleInt,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$TransposeAxRT: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$TransposeAxRT.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$TransposeAxRT are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$IsArray has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(getEmpty,[Default]), UsedName(sportarray;ArrayDefs;IsArray;init;,[Default]), UsedName(::,[Default]), UsedName(getAtN,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(fromList,[Default]), UsedName(eq,[Default]), UsedName(empty,[Default]), UsedName(++,[Default]), UsedName(ndims,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(map,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reshape,[Default]), UsedName(equals,[Default]), UsedName(shape,[Default]), UsedName(Out,[Default]), UsedName(flatten,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(Elem,[Default]), UsedName(asInstanceOf,[Default]), UsedName(IsArray,[Default]), UsedName(cons,[Default]), UsedName(length,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(toList,[Default]), UsedName(fromElems,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$IsArray: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$IsArray.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.ArraySpec: Set(UsedName(sportarray;ArrayDefs;IsArray;init;,[Default]), UsedName(::,[Default]), UsedName(getAtN,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(fromList,[Default]), UsedName(eq,[Default]), UsedName(++,[Default]), UsedName(map,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(shape,[Default]), UsedName(Out,[Default]), UsedName(flatten,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(IsArray,[Default]), UsedName(length,[Default]), UsedName(toList,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.Dummy: Set(UsedName(::,[Default]), UsedName(apply,[Default]), UsedName(Out,[Default]), UsedName(==,[Default]), UsedName(IsArray,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.Dummy.IsArrayImplicits: Set(UsedName(sportarray;ArrayDefs;IsArray;init;,[Default]), UsedName(::,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(IsArray,[Default]), UsedName(length,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Flatten has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(flattenIfSIsNotT,[Implicit]), UsedName(flattenIfSIsT,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Flatten: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Flatten.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Flatten are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.Dummy[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$PrettyPrint$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifIs1dp,[Implicit]), UsedName(ifIs1d,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$PrettyPrint$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$PrettyPrint$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$PrettyPrint$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ArraySort$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifTwoPlusElemsRemainingAsc,[Implicit]), UsedName(ifTwoElemsRemainingAsc,[Implicit]), UsedName(ifTwoElemsRemainingDesc,[Implicit]), UsedName(ifSingleElemList,[Implicit]), UsedName(ifTwoPlusElemsRemainingDesc,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ArraySort$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ArraySort$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ArraySort$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Shape$ShapeRecur has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(gsIfSIsEle,[Implicit]), UsedName(gsIfSIsArr,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Shape$ShapeRecur: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Shape$ShapeRecur.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Shape$ShapeRecur are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$SetElem has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHListIntIsArr,[Implicit]), UsedName(ifHListIntIsBase,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$SetElem: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$SetElem.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$SetElem are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$BroadcastShapesOpt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifSHBGtEqSHA,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$BroadcastShapesOpt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$BroadcastShapesOpt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$BroadcastShapesOpt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$BroadcastShapesOpt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifSHBGtEqSHA,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$BroadcastShapesOpt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$BroadcastShapesOpt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$BroadcastShapesOpt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ExpandDims has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHListBool,[Implicit]), UsedName(ifDepthmatches,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ExpandDims: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ExpandDims.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ExpandDims are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$AddOpt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifSameType,[Implicit]), UsedName(ifDiffType,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$AddOpt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$AddOpt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$AddOpt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ListSubs$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifArray,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ListSubs$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ListSubs$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ListSubs$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ListSubs has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifArray,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ListSubs: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ListSubs.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ListSubs are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Shape$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHList,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Shape$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Shape$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Shape$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$BroadcastOpt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifShapesBroadcast,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$BroadcastOpt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$BroadcastOpt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$BroadcastOpt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$TransposeUsingString$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifList,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$TransposeUsingString$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$TransposeUsingString$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$TransposeUsingString$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportdate.SportDate$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(YMD,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(SportDate,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportdate.SportDate$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportdate.SportDate$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.Dummy: Set(UsedName(SportDate,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$TransposeUsingString has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifList,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$TransposeUsingString: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$TransposeUsingString.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$TransposeUsingString are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$MaskFromNumSeq$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifRefIsHNil,[Implicit]), UsedName(ifHeadIsListIntNotBase,[Implicit]), UsedName(ifHeadIsListIntIsBase,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$MaskFromNumSeq$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$MaskFromNumSeq$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$MaskFromNumSeq$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ApplyIndexFromSubArrays$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHeadIsRange,[Implicit]), UsedName(ifHeadIsInt,[Implicit]), UsedName(ifRefIsHNil,[Implicit]), UsedName(ifHeadIsListInt,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ApplyIndexFromSubArrays$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ApplyIndexFromSubArrays$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ApplyIndexFromSubArrays$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$AllSlice has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(AllSlice,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$AllSlice: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$AllSlice.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.ArraySpec: Set(UsedName(AllSlice,[Default]), UsedName(eq,[Default]), UsedName(isInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ApplyIndexFromSubArrays has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHeadIsRange,[Implicit]), UsedName(ifHeadIsInt,[Implicit]), UsedName(ifRefIsHNil,[Implicit]), UsedName(ifHeadIsListInt,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ApplyIndexFromSubArrays: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ApplyIndexFromSubArrays.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ApplyIndexFromSubArrays are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ApplyIndex has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifIdxIsBooleanArray,[Implicit]), UsedName(ifIdxIsListInt,[Implicit]), UsedName(ifIdxIsInt,[Implicit]), UsedName(ifIdxIsHList,[Implicit]), UsedName(ifIdxIsRange,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ApplyIndex: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ApplyIndex.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ApplyIndex are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Depth has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifArr,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Depth: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Depth.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Depth are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Transpose$TransAllDT has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(whileDmLessThanPass,[Implicit]), UsedName(dmEqualsPass,[Implicit]), UsedName(psEqualsZero,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Transpose$TransAllDT: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Transpose$TransAllDT.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Transpose$TransAllDT are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Reduce$ReduceToList has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifDMIs0AndSIs2dPlus,[Implicit]), UsedName(ifDMIs0AndSIs1d,[Implicit]), UsedName(ifDMGt0,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Reduce$ReduceToList: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Reduce$ReduceToList.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Reduce$ReduceToList are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$BroadcastOpt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifShapesBroadcast,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$BroadcastOpt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$BroadcastOpt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$BroadcastOpt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Transpose$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifNil,[Implicit]), UsedName(ifTupleNat,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Transpose$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Transpose$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Transpose$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportdate.SportDate has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(YMD,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(SportDate,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportdate.SportDate: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportdate.SportDate.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.Dummy: Set(UsedName(SportDate,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$IsArraySyntax$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(IsArrayOps,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$IsArraySyntax$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$IsArraySyntax$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$IsArraySyntax$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.Dummy.IsArrayImplicits[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Reduce has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifDeGt2,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Reduce: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Reduce.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Reduce are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ExpandShapeDims has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHeadIsFalse,[Implicit]), UsedName(ifHNil,[Implicit]), UsedName(ifHeadIsTrue,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ExpandShapeDims: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ExpandShapeDims.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ExpandShapeDims are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportdate.IsSportDateSyntax$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(IsSportDateOps,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportdate.IsSportDateSyntax$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportdate.IsSportDateSyntax$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportdate.IsSportDateSyntax$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.Dummy[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$FromElemsAndArrayOpt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifArray,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$FromElemsAndArrayOpt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$FromElemsAndArrayOpt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$FromElemsAndArrayOpt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Shape$ShapeRecur$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(gsIfSIsEle,[Implicit]), UsedName(gsIfSIsArr,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Shape$ShapeRecur$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Shape$ShapeRecur$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Shape$ShapeRecur$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$IsArraySyntax$IsArrayOps has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(tc,[Implicit]), UsedName(IsArrayOps,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$IsArraySyntax$IsArrayOps: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$IsArraySyntax$IsArrayOps.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$IsArraySyntax$IsArrayOps are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportdate.IsSportDateSyntax has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(IsSportDateOps,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportdate.IsSportDateSyntax: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportdate.IsSportDateSyntax.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportdate.IsSportDateSyntax are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.Dummy[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$IsArray$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(getEmpty,[Default]), UsedName(sportarray;ArrayDefs;IsArray;init;,[Default]), UsedName(::,[Default]), UsedName(getAtN,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(fromList,[Default]), UsedName(eq,[Default]), UsedName(empty,[Default]), UsedName(++,[Default]), UsedName(ndims,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(map,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reshape,[Default]), UsedName(equals,[Default]), UsedName(shape,[Default]), UsedName(Out,[Default]), UsedName(flatten,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(Elem,[Default]), UsedName(asInstanceOf,[Default]), UsedName(IsArray,[Default]), UsedName(cons,[Default]), UsedName(length,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(toList,[Default]), UsedName(fromElems,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$IsArray$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$IsArray$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.ArraySpec: Set(UsedName(sportarray;ArrayDefs;IsArray;init;,[Default]), UsedName(::,[Default]), UsedName(getAtN,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(fromList,[Default]), UsedName(eq,[Default]), UsedName(++,[Default]), UsedName(map,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName($isInstanceOf,[Default]), UsedName(shape,[Default]), UsedName(Out,[Default]), UsedName(flatten,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(IsArray,[Default]), UsedName(length,[Default]), UsedName(toList,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Reduce$ReduceToList$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifDMIs0AndSIs2dPlus,[Implicit]), UsedName(ifDMIs0AndSIs1d,[Implicit]), UsedName(ifDMGt0,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Reduce$ReduceToList$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Reduce$ReduceToList$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Reduce$ReduceToList$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Reduce$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifDeGt2,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Reduce$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Reduce$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Reduce$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Slices,[Default]), UsedName(hashCode,[Default]), UsedName(Concatenate,[Default]), UsedName(AllSlice,[Default]), UsedName(Where,[Default]), UsedName(finalize,[Default]), UsedName(ConcatenateOpt,[Default]), UsedName(S,[Default]), UsedName(SubArrays,[Default]), UsedName(notifyAll,[Default]), UsedName(combineS,[Default]), UsedName(IsArraySyntax,[Default]), UsedName(eq,[Default]), UsedName(BroadcastOpt,[Default]), UsedName(Descending,[Default]), UsedName(TransposeFromListInt,[Default]), UsedName(allSlice,[Default]), UsedName(getClass,[Default]), UsedName(AddOpt,[Default]), UsedName(!=,[Default]), UsedName(OperateOpt,[Default]), UsedName(Reduce,[Default]), UsedName(ArraySort,[Default]), UsedName(Flatten,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(FromElemsAndArrayOpt,[Default]), UsedName(FromElemsAndSubArraysOpt,[Default]), UsedName(Depth,[Default]), UsedName(TransposeUsingString,[Default]), UsedName(ArrayDefs,[Default]), UsedName(ExpandDims,[Default]), UsedName(ne,[Default]), UsedName(TransposeAxRT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Ascending,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ExpandShapeDims,[Default]), UsedName(MaskFromNumSeq,[Default]), UsedName(ApplyIndexFromSubArrays,[Default]), UsedName(SetElem,[Default]), UsedName(==,[Default]), UsedName(Element,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CombineShapesOpt,[Default]), UsedName(IsArray,[Default]), UsedName(BroadcastShapesOpt,[Default]), UsedName(ApplyIndex,[Default]), UsedName(PrettyPrint,[Default]), UsedName(ListSubs,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Transpose,[Default]), UsedName(Shape,[Default]), UsedName(ArraySortedBy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.ArraySpec: Set(UsedName(Concatenate,[Default]), UsedName(AllSlice,[Default]), UsedName(Where,[Default]), UsedName(ConcatenateOpt,[Default]), UsedName(S,[Default]), UsedName(SubArrays,[Default]), UsedName(IsArraySyntax,[Default]), UsedName(eq,[Default]), UsedName(BroadcastOpt,[Default]), UsedName(Descending,[Default]), UsedName(TransposeFromListInt,[Default]), UsedName(AddOpt,[Default]), UsedName(OperateOpt,[Default]), UsedName(Reduce,[Default]), UsedName(ArraySort,[Default]), UsedName(Flatten,[Default]), UsedName(isInstanceOf,[Default]), UsedName(FromElemsAndArrayOpt,[Default]), UsedName(FromElemsAndSubArraysOpt,[Default]), UsedName(Depth,[Default]), UsedName(TransposeUsingString,[Default]), UsedName(ArrayDefs,[Default]), UsedName(ExpandDims,[Default]), UsedName(TransposeAxRT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Ascending,[Default]), UsedName(ExpandShapeDims,[Default]), UsedName(MaskFromNumSeq,[Default]), UsedName(ApplyIndexFromSubArrays,[Default]), UsedName(SetElem,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CombineShapesOpt,[Default]), UsedName(IsArray,[Default]), UsedName(BroadcastShapesOpt,[Default]), UsedName(ApplyIndex,[Default]), UsedName(PrettyPrint,[Default]), UsedName(ListSubs,[Default]), UsedName(Transpose,[Default]), UsedName(Shape,[Default]), UsedName(ArraySortedBy,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.Dummy: Set(UsedName(Flatten,[Default]), UsedName(ArrayDefs,[Default]), UsedName(==,[Default]), UsedName(IsArray,[Default]), UsedName(Shape,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of sportarray.Dummy.IsArrayImplicits: Set(UsedName(S,[Default]), UsedName(IsArraySyntax,[Default]), UsedName(ArrayDefs,[Default]), UsedName(IsArray,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ArraySort has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifTwoPlusElemsRemainingAsc,[Implicit]), UsedName(ifTwoElemsRemainingAsc,[Implicit]), UsedName(ifTwoElemsRemainingDesc,[Implicit]), UsedName(ifSingleElemList,[Implicit]), UsedName(ifTwoPlusElemsRemainingDesc,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ArraySort: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ArraySort.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ArraySort are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$CombineShapesOpt$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHeadIsInt,[Implicit]), UsedName(ifHNil,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$CombineShapesOpt$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$CombineShapesOpt$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$CombineShapesOpt$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Shape has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHList,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Shape: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Shape.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Shape are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.Dummy[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Where$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifArray,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Where$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Where$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Where$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$TransposeFromListInt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifList,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$TransposeFromListInt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$TransposeFromListInt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$TransposeFromListInt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Transpose has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifNil,[Implicit]), UsedName(ifTupleNat,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Transpose: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Transpose.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Transpose are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$CombineShapesOpt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifHeadIsInt,[Implicit]), UsedName(ifHNil,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$CombineShapesOpt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$CombineShapesOpt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$CombineShapesOpt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$SubArrays$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(go,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$SubArrays$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$SubArrays$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$SubArrays$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$FromElemsAndSubArraysOpt has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifShapeIsHNil,[Implicit]), UsedName(ifShapeIsNotHNil,[Implicit]), UsedName(ifArraysDescending,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$FromElemsAndSubArraysOpt: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$FromElemsAndSubArraysOpt.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$FromElemsAndSubArraysOpt are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$ApplyIndex$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifIdxIsBooleanArray,[Implicit]), UsedName(ifIdxIsListInt,[Implicit]), UsedName(ifIdxIsInt,[Implicit]), UsedName(ifIdxIsHList,[Implicit]), UsedName(ifIdxIsRange,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$ApplyIndex$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$ApplyIndex$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$ApplyIndex$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Transpose$TransAxDT$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifCurrDimIsNotXA,[Implicit]), UsedName(ifCurrDimIsXA,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Transpose$TransAxDT$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Transpose$TransAxDT$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Transpose$TransAxDT$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$Flatten$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(flattenIfSIsNotT,[Implicit]), UsedName(flattenIfSIsT,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$Flatten$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$Flatten$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$Flatten$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mThe sportarray.ArrayDefs$MaskFromNumSeq has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ifRefIsHNil,[Implicit]), UsedName(ifHeadIsListIntNotBase,[Implicit]), UsedName(ifHeadIsListIntIsBase,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) sportarray.ArrayDefs$MaskFromNumSeq: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) sportarray.ArrayDefs$MaskFromNumSeq.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of sportarray.ArrayDefs$MaskFromNumSeq are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/data/vap/sport-array/target/scala-2.13/src_managed/test/amm.scala, /data/vap/sport-array/src/test/scala/indexed-array/ArraySpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(/data/vap/euismod/src/test/scala/euismod/ArraySpec.scala, /data/vap/euismod/target/scala-2.13/src_managed/test/amm.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(/data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$GetEmptyTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$List4d.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$$anon$10.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1$2$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$FromElemsAndArrayOptTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1$7.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$IsArrayImplicits$$anon$2.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$PrettyPrintTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$List3d$.class, /data/vap/sport-array/target/scala-2.13/test-classes/amm$delayedInit$body.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$IsArrayImplicits$$anon$3.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$IsArrayImplicits$$anon$5.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$List2d$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1OfA1$4.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$AddOptTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$BroadcastOptTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$ExpandDimsTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1OfA1$2$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$SetElemTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$DepthTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$List4d$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$$anon$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$anon$whileDmLessThanPass$macro$43$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$$anon$8.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1$5$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1$4.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$OperateTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$$anon$9.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$IsArrayImplicits$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Values$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$Current$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$$anon$7.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$$anon$6.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$List1d$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$ExpandShapeDimsTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/amm.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$BroadcastShapesOptTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$FromElemsAndSubArraysOptTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$$anon$11.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A2$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$FlattenTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$TransposeRTTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$anon$whileDmLessThanPass$macro$3$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$ApplyIndexTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$anon$whileDmLessThanPass$macro$7$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A2$2$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$anon$whileDmLessThanPass$macro$32$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$List1d.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$TransposeUsingStringTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$MapTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1OfA1$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$anon$whileDmLessThanPass$macro$25$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$TransposeTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$List2d.class, /data/vap/sport-array/target/scala-2.13/test-classes/amm$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1OfA1$5$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$Types$List3d.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$ReduceTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$MaskFromNumSeqTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$ShapeTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$TransposeFromListIntTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$WhereTest$1$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$A1$8$.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$anon$whileDmLessThanPass$macro$14$1.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/Dummy$IsArrayImplicits$$anon$4.class, /data/vap/sport-array/target/scala-2.13/test-classes/sportarray/ArraySpec$ConcatenateOptTest$1$.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(sportarray.ArrayDefs$TransposeFromListInt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(TransposeFromListInt,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(ifList,[Implicit]), UsedName(swapElems,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Transpose$TransAllDT$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(whileDmLessThanPass,[Implicit]), UsedName(dmEqualsPass,[Implicit]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(psEqualsZero,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(TransAllDT,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportdate.IsSportDateInstances$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(nScalaTimeDate,[Implicit]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(IsSportDateInstances,[Default]))), NamesChange(sportarray.ArrayDefs$Transpose$TransAxDT,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(ifCurrDimIsNotXA,[Implicit]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifCurrDimIsXA,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(TransAxDT,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.Skeleton$IsBase,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(sportarray;Skeleton;IsBase;init;,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(IsBase,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$SubArrays,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(SubArrays,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(GetARDesc,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(go,[Implicit]))), NamesChange(sportarray.ArrayDefs$FromElemsAndArrayOpt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(FromElemsAndArrayOpt,[Default]), UsedName(ne,[Default]), UsedName(ifArray,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportdate.IsSportDateInstances,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(nScalaTimeDate,[Implicit]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(IsSportDateInstances,[Default]))), NamesChange(sportarray.ArrayDefs$OperateOpt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifBothBase,[Implicit]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(OperateOpt,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ifSameDepthArrs,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.Skeleton$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(IsBase,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Skeleton,[Default]))), NamesChange(sportarray.ArrayDefs$ConcatenateOpt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(ConcatenateOpt,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifNoSubConc,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ifSubConc,[Implicit]))), NamesChange(sportarray.ArrayDefs$FromElemsAndSubArraysOpt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(FromElemsAndSubArraysOpt,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ifShapeIsHNil,[Implicit]), UsedName(synchronized,[Default]), UsedName(ifShapeIsNotHNil,[Implicit]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ifArraysDescending,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Depth$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(ifArr,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Depth,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$TransposeAxRT$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifTupleInt,[Implicit]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(ifTupleInt$default$5,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifTupleInt$default$3,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(ifTupleInt$default$4,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(TransposeAxRT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ExpandShapeDims$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(ifHeadIsFalse,[Implicit]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ifHNil,[Implicit]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ExpandShapeDims,[Default]), UsedName(==,[Default]), UsedName(ifHeadIsTrue,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Where,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(Where,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifArray,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$SubArrays$GetARDesc$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(GetARDesc,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ifSIsEle,[Implicit]), UsedName(ifSIsArr,[Implicit]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$OperateOpt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifBothBase,[Implicit]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(OperateOpt,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ifSameDepthArrs,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ConcatenateOpt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(ConcatenateOpt,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifNoSubConc,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ifSubConc,[Implicit]))), NamesChange(sportarray.ArrayDefs$PrettyPrint,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifIs1dp,[Implicit]), UsedName(apply$default$2,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(maxWidth,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ifIs1d,[Implicit]), UsedName(PrettyPrint,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$SubArrays$GetARDesc,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(GetARDesc,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ifSIsEle,[Implicit]), UsedName(ifSIsArr,[Implicit]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Concatenate,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(Concatenate,[Default]), UsedName(ifDim0,[Implicit]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ifNotDim0,[Implicit]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$SetElem$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(ifHListIntIsArr,[Implicit]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(SetElem,[Default]), UsedName(==,[Default]), UsedName(ifHListIntIsBase,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ExpandDims$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(Suffix,[Default]), UsedName(finalize,[Default]), UsedName(Prefix,[Default]), UsedName(ifHListBool,[Implicit]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ExpandDims,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ifDepthmatches,[Implicit]))), NamesChange(sportarray.ArrayDefs$AddOpt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(ifSameType,[Implicit]), UsedName(AddOpt,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ifDiffType,[Implicit]))), NamesChange(sportarray.ArrayDefs$Concatenate$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(Concatenate,[Default]), UsedName(ifDim0,[Implicit]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ifNotDim0,[Implicit]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$TransposeAxRT,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifTupleInt,[Implicit]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(ifTupleInt$default$5,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifTupleInt$default$3,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(ifTupleInt$default$4,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(TransposeAxRT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$IsArray,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(getEmpty,[Default]), UsedName(sportarray;ArrayDefs;IsArray;init;,[Default]), UsedName(::,[Default]), UsedName(getAtN,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(fromList,[Default]), UsedName(eq,[Default]), UsedName(empty,[Default]), UsedName(++,[Default]), UsedName(ndims,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(map,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reshape,[Default]), UsedName(equals,[Default]), UsedName(shape,[Default]), UsedName(Out,[Default]), UsedName(flatten,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(Elem,[Default]), UsedName(asInstanceOf,[Default]), UsedName(IsArray,[Default]), UsedName(cons,[Default]), UsedName(length,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(toList,[Default]), UsedName(fromElems,[Default]))), NamesChange(sportarray.ArrayDefs$Flatten,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(Flatten,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(flattenIfSIsNotT,[Implicit]), UsedName(toString,[Default]), UsedName(flattenIfSIsT,[Implicit]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$PrettyPrint$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifIs1dp,[Implicit]), UsedName(apply$default$2,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(maxWidth,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ifIs1d,[Implicit]), UsedName(PrettyPrint,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ArraySort$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(ifTwoPlusElemsRemainingAsc,[Implicit]), UsedName(eq,[Default]), UsedName(ifTwoElemsRemainingAsc,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(ArraySort,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ifTwoElemsRemainingDesc,[Implicit]), UsedName(ifSingleElemList,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ifTwoPlusElemsRemainingDesc,[Implicit]))), NamesChange(sportarray.ArrayDefs$Shape$ShapeRecur,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(gsIfSIsEle,[Implicit]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(recur,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ShapeRecur,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(RecurAux,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(gsIfSIsArr,[Implicit]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$SetElem,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(ifHListIntIsArr,[Implicit]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(SetElem,[Default]), UsedName(==,[Default]), UsedName(ifHListIntIsBase,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$BroadcastShapesOpt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(BroadcastShapesOpt,[Default]), UsedName(ifSHBGtEqSHA,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$BroadcastShapesOpt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(BroadcastShapesOpt,[Default]), UsedName(ifSHBGtEqSHA,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ExpandDims,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(Suffix,[Default]), UsedName(finalize,[Default]), UsedName(Prefix,[Default]), UsedName(ifHListBool,[Implicit]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ExpandDims,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ifDepthmatches,[Implicit]))), NamesChange(sportarray.ArrayDefs$AddOpt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(ifSameType,[Implicit]), UsedName(AddOpt,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ifDiffType,[Implicit]))), NamesChange(sportarray.ArrayDefs$ListSubs$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifArray,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ListSubs,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ListSubs,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifArray,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ListSubs,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Shape$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ShapeRecur,[Default]), UsedName(ne,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ifHList,[Implicit]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(toList,[Default]), UsedName(Shape,[Default]))), NamesChange(sportarray.ArrayDefs$BroadcastOpt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(BroadcastOpt,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ifShapesBroadcast,[Implicit]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$TransposeUsingString$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TransposeUsingString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(ifList,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportdate.SportDate$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(YMD,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(SportDate,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$TransposeUsingString,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(TransposeUsingString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(ifList,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$MaskFromNumSeq$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifRefIsHNil,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(ifHeadIsListIntNotBase,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(MaskFromNumSeq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ifHeadIsListIntIsBase,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ApplyIndexFromSubArrays$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifHeadIsRange,[Implicit]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifHeadIsInt,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifRefIsHNil,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName(ifHeadIsListInt,[Implicit]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ApplyIndexFromSubArrays,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$AllSlice,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(AllSlice,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ApplyIndexFromSubArrays,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifHeadIsRange,[Implicit]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifHeadIsInt,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifRefIsHNil,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName(ifHeadIsListInt,[Implicit]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ApplyIndexFromSubArrays,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ApplyIndex,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifIdxIsBooleanArray,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(ifIdxIsListInt,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ifIdxIsInt,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ifIdxIsHList,[Implicit]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ifIdxIsRange,[Implicit]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ApplyIndex,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Depth,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(ifArr,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Depth,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Transpose$TransAllDT,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(whileDmLessThanPass,[Implicit]), UsedName(dmEqualsPass,[Implicit]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(psEqualsZero,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(TransAllDT,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Reduce$ReduceToList,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(ifDMIs0AndSIs2dPlus,[Implicit]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(ifDMIs0AndSIs1d,[Implicit]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifDMGt0,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName(ReduceToList,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$BroadcastOpt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(BroadcastOpt,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ifShapesBroadcast,[Implicit]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Transpose$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ifNil,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(TransAxDT,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(TransAllDT,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Transpose,[Default]), UsedName(ifTupleNat,[Implicit]))), NamesChange(sportdate.SportDate,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(YMD,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(SportDate,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$IsArraySyntax$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(notifyAll,[Default]), UsedName(IsArraySyntax,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(IsArrayOps,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Reduce,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifDeGt2,[Implicit]), UsedName(Suffix,[Default]), UsedName(finalize,[Default]), UsedName(Prefix,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(Reduce,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName(ReduceToList,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ExpandShapeDims,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(ifHeadIsFalse,[Implicit]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ifHNil,[Implicit]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ExpandShapeDims,[Default]), UsedName(==,[Default]), UsedName(ifHeadIsTrue,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportdate.IsSportDateSyntax$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(IsSportDateOps,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(IsSportDateSyntax,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$FromElemsAndArrayOpt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(FromElemsAndArrayOpt,[Default]), UsedName(ne,[Default]), UsedName(ifArray,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Shape$ShapeRecur$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(gsIfSIsEle,[Implicit]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(recur,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ShapeRecur,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(RecurAux,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(gsIfSIsArr,[Implicit]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$IsArraySyntax$IsArrayOps,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(getEmpty,[Default]), UsedName(::,[Default]), UsedName(getAtN,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(tc,[Implicit]), UsedName(fromList,[Default]), UsedName(sportarray;ArrayDefs;IsArraySyntax;IsArrayOps;init;,[Default]), UsedName(eq,[Default]), UsedName(empty,[Default]), UsedName(++,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(map,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reshape,[Default]), UsedName(equals,[Default]), UsedName(shape,[Default]), UsedName(Out,[Default]), UsedName(flatten,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(length,[Default]), UsedName(IsArrayOps,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(toList,[Default]), UsedName(fromElems,[Default]))), NamesChange(sportdate.IsSportDateSyntax,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(IsSportDateOps,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(IsSportDateSyntax,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$IsArray$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(getEmpty,[Default]), UsedName(sportarray;ArrayDefs;IsArray;init;,[Default]), UsedName(::,[Default]), UsedName(getAtN,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(fromList,[Default]), UsedName(eq,[Default]), UsedName(empty,[Default]), UsedName(++,[Default]), UsedName(ndims,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(map,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reshape,[Default]), UsedName(equals,[Default]), UsedName(shape,[Default]), UsedName(Out,[Default]), UsedName(flatten,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(Elem,[Default]), UsedName(asInstanceOf,[Default]), UsedName(IsArray,[Default]), UsedName(cons,[Default]), UsedName(length,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(toList,[Default]), UsedName(fromElems,[Default]))), NamesChange(sportarray.ArrayDefs$Reduce$ReduceToList$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(ifDMIs0AndSIs2dPlus,[Implicit]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(ifDMIs0AndSIs1d,[Implicit]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifDMGt0,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName(ReduceToList,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Reduce$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(ifDeGt2,[Implicit]), UsedName(Suffix,[Default]), UsedName(finalize,[Default]), UsedName(Prefix,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(Reduce,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName(ReduceToList,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$,ModifiedNames(changes = UsedName(Slices,[Default]), UsedName(hashCode,[Default]), UsedName(Concatenate,[Default]), UsedName(AllSlice,[Default]), UsedName(Where,[Default]), UsedName(finalize,[Default]), UsedName(ConcatenateOpt,[Default]), UsedName(S,[Default]), UsedName(SubArrays,[Default]), UsedName(notifyAll,[Default]), UsedName(combineS,[Default]), UsedName(IsArraySyntax,[Default]), UsedName(eq,[Default]), UsedName(BroadcastOpt,[Default]), UsedName(Descending,[Default]), UsedName(TransposeFromListInt,[Default]), UsedName(allSlice,[Default]), UsedName(getClass,[Default]), UsedName(AddOpt,[Default]), UsedName(!=,[Default]), UsedName(OperateOpt,[Default]), UsedName(Reduce,[Default]), UsedName(ArraySort,[Default]), UsedName(Flatten,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(FromElemsAndArrayOpt,[Default]), UsedName(FromElemsAndSubArraysOpt,[Default]), UsedName(Depth,[Default]), UsedName(TransposeUsingString,[Default]), UsedName(ArrayDefs,[Default]), UsedName(ExpandDims,[Default]), UsedName(ne,[Default]), UsedName(TransposeAxRT,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Ascending,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ExpandShapeDims,[Default]), UsedName(MaskFromNumSeq,[Default]), UsedName(ApplyIndexFromSubArrays,[Default]), UsedName(SetElem,[Default]), UsedName(==,[Default]), UsedName(Element,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CombineShapesOpt,[Default]), UsedName(IsArray,[Default]), UsedName(BroadcastShapesOpt,[Default]), UsedName(ApplyIndex,[Default]), UsedName(PrettyPrint,[Default]), UsedName(ListSubs,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Transpose,[Default]), UsedName(Shape,[Default]), UsedName(ArraySortedBy,[Default]))), NamesChange(sportarray.ArrayDefs$ArraySort,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(notifyAll,[Default]), UsedName(ifTwoPlusElemsRemainingAsc,[Implicit]), UsedName(eq,[Default]), UsedName(ifTwoElemsRemainingAsc,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(ArraySort,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ifTwoElemsRemainingDesc,[Implicit]), UsedName(ifSingleElemList,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(ifTwoPlusElemsRemainingDesc,[Implicit]))), NamesChange(sportarray.ArrayDefs$CombineShapesOpt$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifHeadIsInt,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ifHNil,[Implicit]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CombineShapesOpt,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Shape,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(Lub,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ShapeRecur,[Default]), UsedName(ne,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ifHList,[Implicit]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(toList,[Default]), UsedName(Shape,[Default]))), NamesChange(sportarray.ArrayDefs$Where$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(Where,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifArray,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$TransposeFromListInt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(TransposeFromListInt,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(ifList,[Implicit]), UsedName(swapElems,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Transpose,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ifNil,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(TransAxDT,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(TransAllDT,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(Transpose,[Default]), UsedName(ifTupleNat,[Implicit]))), NamesChange(sportarray.ArrayDefs$CombineShapesOpt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply$default$3,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifHeadIsInt,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ifHNil,[Implicit]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CombineShapesOpt,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$SubArrays$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(apply,[Default]), UsedName(SubArrays,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(GetARDesc,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(go,[Implicit]))), NamesChange(sportarray.ArrayDefs$FromElemsAndSubArraysOpt,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(FromElemsAndSubArraysOpt,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(ifShapeIsHNil,[Implicit]), UsedName(synchronized,[Default]), UsedName(ifShapeIsNotHNil,[Implicit]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ifArraysDescending,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$ApplyIndex$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifIdxIsBooleanArray,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(ifIdxIsListInt,[Implicit]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ifIdxIsInt,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ifIdxIsHList,[Implicit]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(ifIdxIsRange,[Implicit]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ApplyIndex,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Transpose$TransAxDT$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(ifCurrDimIsNotXA,[Implicit]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(ifCurrDimIsXA,[Implicit]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(TransAxDT,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$Flatten$,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(Flatten,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(flattenIfSIsNotT,[Implicit]), UsedName(toString,[Default]), UsedName(flattenIfSIsT,[Implicit]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))), NamesChange(sportarray.ArrayDefs$MaskFromNumSeq,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(Aux,[Default]), UsedName(S,[Default]), UsedName(apply,[Default]), UsedName(instance,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(ifRefIsHNil,[Implicit]), UsedName($isInstanceOf,[Default]), UsedName(ifHeadIsListIntNotBase,[Implicit]), UsedName(equals,[Default]), UsedName(Out,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(MaskFromNumSeq,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ifHeadIsListIntIsBase,[Implicit]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set(/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/joda-time/joda-time/2.10.6/joda-time-2.10.6.jar, /home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/joda/joda-convert/2.2.1/joda-convert-2.2.1.jar, /home/chris/.sbt/1.0/staging/96b386c9bc10429ae917/sport-date/target/scala-2.13/classes, /data/vap/sport-array/target/scala-2.13/classes, /home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/nscala-time/nscala-time_2.13/2.24.0/nscala-time_2.13-2.24.0.jar, /data/vap/euismod/target/scala-2.13/classes)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(sportarray.Dummy.IsArrayImplicits, sportarray.ArraySpec.Current, sportarray.Dummy.Types.List2d, sportarray.Dummy.Types.List1d, sportarray.Dummy.Values, sportarray.Dummy.Types.List3d, sportarray.Dummy, amm, sportarray.Dummy.Types.List4d, sportarray.Dummy.Types, sportarray.ArraySpec)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(/data/vap/sport-array/target/scala-2.13/src_managed/test/amm.scala, /data/vap/sport-array/src/test/scala/indexed-array/ArraySpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set(/data/vap/sport-array/src/test/scala/indexed-array/ArraySpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(sportarray.ArraySpec, sportarray.Dummy, sportarray.Dummy.IsArrayImplicits)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(sportarray.Dummy.IsArrayImplicits, sportarray.ArraySpec.Current, sportarray.Dummy.Types.List2d, sportarray.Dummy.Types.List1d, sportarray.Dummy.Values, sportarray.Dummy.Types.List3d, sportarray.Dummy, amm, sportarray.Dummy.Types.List4d, sportarray.Dummy.Types, sportarray.ArraySpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/data/vap/euismod/src/test/scala/euismod/ArraySpec.scala, /data/vap/euismod/target/scala-2.13/src_managed/test/amm.scala, /data/vap/sport-array/target/scala-2.13/src_managed/test/amm.scala, /data/vap/sport-array/src/test/scala/indexed-array/ArraySpec.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy.IsArrayImplicits, sportarray.ArraySpec.Current, sportarray.Dummy.Types.List2d, sportarray.Dummy.Types.List1d, sportarray.Dummy.Values, sportarray.Dummy.Types.List3d, sportarray.Dummy, amm, sportarray.Dummy.Types.List4d, sportarray.Dummy.Types, sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 2 Scala sources to /data/vap/euismod/target/scala-2.13/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.3.5:compile for Scala 2.13.2[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.3.5:compile for Scala 2.13.2[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 67c11c2a for Scala compiler version 2.13.2[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xplugin:kind-projector_2.10-0.6.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-P:splain:all:true[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xplugin:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/tryp/splain_2.13.2/0.5.7/splain_2.13.2-0.5.7.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xplugin:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/kind-projector_2.13.2/0.11.0/kind-projector_2.13.2-0.11.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/nix/store/3gr6id5i7bi0qhx29vilv1xcwkzjakcl-openjdk-8u272-b10/lib/openjdk/jre/lib/resources.jar:/nix/store/3gr6id5i7bi0qhx29vilv1xcwkzjakcl-openjdk-8u272-b10/lib/openjdk/jre/lib/rt.jar:/nix/store/3gr6id5i7bi0qhx29vilv1xcwkzjakcl-openjdk-8u272-b10/lib/openjdk/jre/lib/sunrsasign.jar:/nix/store/3gr6id5i7bi0qhx29vilv1xcwkzjakcl-openjdk-8u272-b10/lib/openjdk/jre/lib/jsse.jar:/nix/store/3gr6id5i7bi0qhx29vilv1xcwkzjakcl-openjdk-8u272-b10/lib/openjdk/jre/lib/jce.jar:/nix/store/3gr6id5i7bi0qhx29vilv1xcwkzjakcl-openjdk-8u272-b10/lib/openjdk/jre/lib/charsets.jar:/nix/store/3gr6id5i7bi0qhx29vilv1xcwkzjakcl-openjdk-8u272-b10/lib/openjdk/jre/lib/jfr.jar:/nix/store/3gr6id5i7bi0qhx29vilv1xcwkzjakcl-openjdk-8u272-b10/lib/openjdk/jre/classes:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.2/scala-library-2.13.2.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/data/vap/euismod/target/scala-2.13/test-classes:/data/vap/euismod/target/scala-2.13/classes:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/chuusai/shapeless_2.13/2.3.3/shapeless_2.13-2.3.3.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest_2.13/3.1.1/scalatest_2.13-3.1.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite_2.13.2/2.2.0/ammonite_2.13.2-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalactic/scalactic_2.13/3.1.1/scalactic_2.13-3.1.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.13.2/scala-reflect-2.13.2.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.13/1.2.0/scala-xml_2.13-1.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite-terminal_2.13/2.2.0/ammonite-terminal_2.13-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite-ops_2.13/2.2.0/ammonite-ops_2.13-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite-util_2.13/2.2.0/ammonite-util_2.13-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite-runtime_2.13.2/2.2.0/ammonite-runtime_2.13.2-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite-interp-api_2.13.2/2.2.0/ammonite-interp-api_2.13.2-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite-repl-api_2.13.2/2.2.0/ammonite-repl-api_2.13.2-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite-interp_2.13.2/2.2.0/ammonite-interp_2.13.2-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ammonite-repl_2.13.2/2.2.0/ammonite-repl_2.13.2-2.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/sourcecode_2.13/0.2.1/sourcecode_2.13-0.2.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/fansi_2.13/0.2.9/fansi_2.13-0.2.9.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/os-lib_2.13/0.7.1/os-lib_2.13-0.7.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-collection-compat_2.13/2.1.6/scala-collection-compat_2.13-2.1.6.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/pprint_2.13/0.5.9/pprint_2.13-0.5.9.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/upickle_2.13/1.2.0/upickle_2.13-1.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/requests_2.13/0.6.5/requests_2.13-0.6.5.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-compiler/2.13.2/scala-compiler-2.13.2.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/interface/0.0.21/interface-0.0.21.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/scopt/scopt_2.13/3.7.1/scopt_2.13-3.7.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/ch/epfl/scala/bsp4j/2.0.0-M6/bsp4j-2.0.0-M6.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalameta/trees_2.13/4.3.20/trees_2.13-4.3.20.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/scalaparse_2.13/2.3.0/scalaparse_2.13-2.3.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/javassist/javassist/3.21.0-GA/javassist-3.21.0-GA.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jline/jline-terminal/3.14.1/jline-terminal-3.14.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jline/jline-terminal-jna/3.14.1/jline-terminal-jna-3.14.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jline/jline-reader/3.14.1/jline-reader-3.14.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/github/javaparser/javaparser-core/3.2.5/javaparser-core-3.2.5.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/geny_2.13/0.6.2/geny_2.13-0.6.2.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/ujson_2.13/1.2.0/ujson_2.13-1.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/upack_2.13/1.2.0/upack_2.13-1.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/upickle-implicits_2.13/1.2.0/upickle-implicits_2.13-1.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/jline/jline/3.14.1/jline-3.14.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/net/java/dev/jna/jna/5.3.1/jna-5.3.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/eclipse/lsp4j/org.eclipse.lsp4j.generator/0.8.1/org.eclipse.lsp4j.generator-0.8.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/eclipse/lsp4j/org.eclipse.lsp4j.jsonrpc/0.8.1/org.eclipse.lsp4j.jsonrpc-0.8.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalameta/common_2.13/4.3.20/common_2.13-4.3.20.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/thesamet/scalapb/scalapb-runtime_2.13/0.10.3/scalapb-runtime_2.13-0.10.3.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalameta/fastparse_2.13/1.0.1/fastparse_2.13-1.0.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/fastparse_2.13/2.3.0/fastparse_2.13-2.3.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/upickle-core_2.13/1.2.0/upickle-core_2.13-1.2.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/eclipse/xtend/org.eclipse.xtend.lib/2.18.0/org.eclipse.xtend.lib-2.18.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/google/code/gson/gson/2.8.2/gson-2.8.2.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/thesamet/scalapb/lenses_2.13/0.10.3/lenses_2.13-0.10.3.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/google/protobuf/protobuf-java/3.11.4/protobuf-java-3.11.4.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalameta/fastparse-utils_2.13/1.0.1/fastparse-utils_2.13-1.0.1.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/eclipse/xtext/org.eclipse.xtext.xbase.lib/2.18.0/org.eclipse.xtext.xbase.lib-2.18.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/org/eclipse/xtend/org.eclipse.xtend.lib.macro/2.18.0/org.eclipse.xtend.lib.macro-2.18.0.jar:/home/chris/.cache/coursier/v1/https/repo1.maven.org/maven2/com/google/guava/guava/21.0/guava-21.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 14.819615425 s[0m
[0m[[0m[0mdebug[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.Dummy.Types.List1d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.Dummy.Types.List1d[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.Dummy.Types.List1d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.Dummy.Types.List1d,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(euismod;Dummy;Types;List1d;init;,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List1d,[Default]))) invalidates 1 classes due to The euismod.Dummy.Types.List1d has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(euismod;Dummy;Types;List1d;init;,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List1d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.Dummy.Types.List1d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.ArraySpec.Current...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.ArraySpec.Current[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.ArraySpec.Current)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.ArraySpec.Current,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(Current,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(name,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))) invalidates 1 classes due to The sportarray.ArraySpec.Current has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(Current,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(name,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.ArraySpec.Current)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.ArraySpec...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.ArraySpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.ArraySpec,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(regex,[Default]), UsedName(KeyWord,[Default]), UsedName(defaultEquality,[Default]), UsedName(withFixture,[Default]), UsedName(ignore,[Default]), UsedName(compile,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(exist,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(suiteId,[Default]), UsedName(assertResult,[Default]), UsedName(runNestedSuites,[Default]), UsedName(RegexWord,[Default]), UsedName(suiteName,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(finalize,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(tags,[Default]), UsedName(sorted,[Default]), UsedName(Then,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(oneElementOf,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(size,[Default]), UsedName(scenariosFor,[Default]), UsedName(equal,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(notifyAll,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(execute$default$1,[Default]), UsedName(alert,[Default]), UsedName(Given,[Default]), UsedName(allElementsOf,[Default]), UsedName(eq,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(fail,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(intercept,[Default]), UsedName(ArraySpec,[Default]), UsedName(empty,[Default]), UsedName(be,[Default]), UsedName(inOrderOnly,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(Scenario,[Default]), UsedName(ValueWord,[Default]), UsedName(testNames,[Default]), UsedName(after,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(Equalizer,[Default]), UsedName(key,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(cancel,[Default]), UsedName(readable,[Default]), UsedName(execute$default$3,[Default]), UsedName(getClass,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(DeterminedWord,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(Feature,[Default]), UsedName(withClue,[Default]), UsedName(not,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(!=,[Default]), UsedName(writable,[Default]), UsedName(euismod;ArraySpec;init;,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(rerunner,[Default]), UsedName(assume,[Default]), UsedName(styleName,[Default]), UsedName(markup,[Default]), UsedName(thrownBy,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(atMostOneOf,[Default]), UsedName(And,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(exactly,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(ne,[Default]), UsedName(include,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(testDataFor,[Default]), UsedName(between,[Default]), UsedName(Current,[Default]), UsedName(determined,[Default]), UsedName(assert,[Default]), UsedName(atLeast,[Default]), UsedName($init$,[Default]), UsedName(of,[Default]), UsedName($isInstanceOf,[Default]), UsedName(contain,[Default]), UsedName(assertThrows,[Default]), UsedName(<=,[Default]), UsedName(have,[Default]), UsedName(scenario,[Default]), UsedName(endWith,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(matchPattern,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(RegexWrapper,[Default]), UsedName(typeCheck,[Default]), UsedName(execute$default$6,[Default]), UsedName(equals,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(defined,[Default]), UsedName(oneOf,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(decided,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(an,[Default]), UsedName($asInstanceOf,[Default]), UsedName(When,[Default]), UsedName(every,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(nestedSuites,[Default]), UsedName(<,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(noElementsOf,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(toString,[Default]), UsedName(assertTypeError,[Default]), UsedName(registerTest,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(synchronized,[Default]), UsedName(a,[Default]), UsedName(runTest,[Default]), UsedName(message,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(===,[Default]), UsedName(execute$default$4,[Default]), UsedName(the,[Default]), UsedName(>,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(doCollected,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(==,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(NoArgTest,[Default]), UsedName(asInstanceOf,[Default]), UsedName(allOf,[Default]), UsedName(execute$default$2,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(definedAt,[Default]), UsedName(run,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(execute$default$5,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(runTests,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(value,[Default]), UsedName(!==,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(feature,[Default]), UsedName(length,[Default]), UsedName(succeed,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(DecidedWord,[Default]), UsedName(info,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(notify,[Default]), UsedName(pending,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(only,[Default]), UsedName(##,[Default]), UsedName(expectedTestCount,[Default]), UsedName(wait,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(atMost,[Default]), UsedName(all,[Default]), UsedName(assertCompiles,[Default]), UsedName(>=,[Default]), UsedName(Collected,[Default]), UsedName(AnWord,[Default]), UsedName(execute,[Default]), UsedName(AWord,[Default]), UsedName(ScenariosFor,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(TheAfterWord,[Default]), UsedName(fullyMatch,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(note,[Default]), UsedName(noneOf,[Default]), UsedName(no,[Default]))) invalidates 1 classes due to The euismod.ArraySpec has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.ArraySpec)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.ArraySpec...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.ArraySpec[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.ArraySpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.ArraySpec,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(regex,[Default]), UsedName(KeyWord,[Default]), UsedName(defaultEquality,[Default]), UsedName(withFixture,[Default]), UsedName(ignore,[Default]), UsedName(compile,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(exist,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(suiteId,[Default]), UsedName(assertResult,[Default]), UsedName(runNestedSuites,[Default]), UsedName(RegexWord,[Default]), UsedName(suiteName,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(finalize,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(tags,[Default]), UsedName(sorted,[Default]), UsedName(Then,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(oneElementOf,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(size,[Default]), UsedName(scenariosFor,[Default]), UsedName(equal,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(notifyAll,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(execute$default$1,[Default]), UsedName(alert,[Default]), UsedName(Given,[Default]), UsedName(allElementsOf,[Default]), UsedName(eq,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(fail,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(intercept,[Default]), UsedName(ArraySpec,[Default]), UsedName(empty,[Default]), UsedName(be,[Default]), UsedName(inOrderOnly,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(Scenario,[Default]), UsedName(ValueWord,[Default]), UsedName(testNames,[Default]), UsedName(after,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(Equalizer,[Default]), UsedName(key,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(cancel,[Default]), UsedName(readable,[Default]), UsedName(execute$default$3,[Default]), UsedName(getClass,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(DeterminedWord,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(Feature,[Default]), UsedName(withClue,[Default]), UsedName(not,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(!=,[Default]), UsedName(writable,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(rerunner,[Default]), UsedName(assume,[Default]), UsedName(styleName,[Default]), UsedName(markup,[Default]), UsedName(thrownBy,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(atMostOneOf,[Default]), UsedName(And,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(exactly,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(ne,[Default]), UsedName(include,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(testDataFor,[Default]), UsedName(between,[Default]), UsedName(Current,[Default]), UsedName(determined,[Default]), UsedName(assert,[Default]), UsedName(atLeast,[Default]), UsedName($init$,[Default]), UsedName(of,[Default]), UsedName($isInstanceOf,[Default]), UsedName(sportarray;ArraySpec;init;,[Default]), UsedName(contain,[Default]), UsedName(assertThrows,[Default]), UsedName(<=,[Default]), UsedName(have,[Default]), UsedName(scenario,[Default]), UsedName(endWith,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(matchPattern,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(RegexWrapper,[Default]), UsedName(typeCheck,[Default]), UsedName(execute$default$6,[Default]), UsedName(equals,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(defined,[Default]), UsedName(oneOf,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(decided,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(an,[Default]), UsedName($asInstanceOf,[Default]), UsedName(When,[Default]), UsedName(every,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(nestedSuites,[Default]), UsedName(<,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(noElementsOf,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(toString,[Default]), UsedName(assertTypeError,[Default]), UsedName(registerTest,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(synchronized,[Default]), UsedName(a,[Default]), UsedName(runTest,[Default]), UsedName(message,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(===,[Default]), UsedName(execute$default$4,[Default]), UsedName(the,[Default]), UsedName(>,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(doCollected,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(==,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(NoArgTest,[Default]), UsedName(asInstanceOf,[Default]), UsedName(allOf,[Default]), UsedName(execute$default$2,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(definedAt,[Default]), UsedName(run,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(execute$default$5,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(runTests,[Default]), UsedName(createCatchReporter,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(value,[Default]), UsedName(!==,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(feature,[Default]), UsedName(length,[Default]), UsedName(succeed,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(DecidedWord,[Default]), UsedName(info,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(notify,[Default]), UsedName(pending,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(only,[Default]), UsedName(##,[Default]), UsedName(expectedTestCount,[Default]), UsedName(wait,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(atMost,[Default]), UsedName(all,[Default]), UsedName(assertCompiles,[Default]), UsedName(>=,[Default]), UsedName(Collected,[Default]), UsedName(AnWord,[Default]), UsedName(execute,[Default]), UsedName(AWord,[Default]), UsedName(ScenariosFor,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(TheAfterWord,[Default]), UsedName(fullyMatch,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(note,[Default]), UsedName(noneOf,[Default]), UsedName(no,[Default]))) invalidates 1 classes due to The sportarray.ArraySpec has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.ArraySpec)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.Dummy.Types.List4d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy.Types.List4d[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.Dummy.Types.List4d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.Dummy.Types.List4d,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(List4d,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(sportarray;Dummy;Types;List4d;init;,[Default]))) invalidates 1 classes due to The sportarray.Dummy.Types.List4d has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(List4d,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(sportarray;Dummy;Types;List4d;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.Dummy.Types.List4d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.Dummy.Types.List2d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy.Types.List2d[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.Dummy.Types.List2d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.Dummy.Types.List2d,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(sportarray;Dummy;Types;List2d;init;,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List2d,[Default]))) invalidates 1 classes due to The sportarray.Dummy.Types.List2d has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(sportarray;Dummy;Types;List2d;init;,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List2d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.Dummy.Types.List2d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.Dummy...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.Dummy)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.Dummy,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(addEquality,[Default]), UsedName(Types,[Default]), UsedName(finalize,[Default]), UsedName(Values,[Default]), UsedName(arrDoubleEquality,[Implicit]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(IsArrayImplicits,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Dummy,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))) invalidates 1 classes due to The sportarray.Dummy has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(arrDoubleEquality,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.Dummy)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.Dummy.Types.List3d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.Dummy.Types.List3d[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.Dummy.Types.List3d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.Dummy.Types.List3d,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(euismod;Dummy;Types;List3d;init;,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List3d,[Default]))) invalidates 1 classes due to The euismod.Dummy.Types.List3d has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(euismod;Dummy;Types;List3d;init;,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List3d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.Dummy.Types.List3d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.Dummy.Values...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.Dummy.Values[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.Dummy.Values)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.Dummy.Values,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(dblVals2d,[Default]), UsedName(finalize,[Default]), UsedName(Values,[Default]), UsedName(ints3d,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(dbl1d,[Default]), UsedName(bl3d,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(dbl3d,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(dbl4d,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(dblVals1d,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dbl2d,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(dblVals4d,[Default]), UsedName(intsVals3d,[Default]), UsedName(dblVals3d,[Default]), UsedName(blVals3d,[Default]))) invalidates 1 classes due to The euismod.Dummy.Values has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(dblVals2d,[Default]), UsedName(finalize,[Default]), UsedName(Values,[Default]), UsedName(ints3d,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(dbl1d,[Default]), UsedName(bl3d,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(dbl3d,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(dbl4d,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(dblVals1d,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dbl2d,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(dblVals4d,[Default]), UsedName(intsVals3d,[Default]), UsedName(dblVals3d,[Default]), UsedName(blVals3d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.Dummy.Values)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.Dummy.Types.List1d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy.Types.List1d[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.Dummy.Types.List1d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.Dummy.Types.List1d,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(sportarray;Dummy;Types;List1d;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List1d,[Default]))) invalidates 1 classes due to The sportarray.Dummy.Types.List1d has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(sportarray;Dummy;Types;List1d;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List1d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.Dummy.Types.List1d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.Dummy...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.Dummy[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.Dummy)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.Dummy,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(addEquality,[Default]), UsedName(Types,[Default]), UsedName(finalize,[Default]), UsedName(Values,[Default]), UsedName(arrDoubleEquality,[Implicit]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(IsArrayImplicits,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Dummy,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))) invalidates 1 classes due to The euismod.Dummy has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(arrDoubleEquality,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.Dummy)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.Dummy.Types...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.Dummy.Types[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.Dummy.Types)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.Dummy.Types,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(List4d,[Default]), UsedName(Types,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List2d,[Default]), UsedName(List3d,[Default]), UsedName(List1d,[Default]))) invalidates 1 classes due to The euismod.Dummy.Types has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(List4d,[Default]), UsedName(Types,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List2d,[Default]), UsedName(List3d,[Default]), UsedName(List1d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.Dummy.Types)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.Dummy.Types...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy.Types[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.Dummy.Types)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.Dummy.Types,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(List4d,[Default]), UsedName(Types,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List2d,[Default]), UsedName(List3d,[Default]), UsedName(List1d,[Default]))) invalidates 1 classes due to The sportarray.Dummy.Types has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(List4d,[Default]), UsedName(Types,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List2d,[Default]), UsedName(List3d,[Default]), UsedName(List1d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.Dummy.Types)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.Dummy.Types.List3d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy.Types.List3d[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.Dummy.Types.List3d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.Dummy.Types.List3d,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(sportarray;Dummy;Types;List3d;init;,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List3d,[Default]))) invalidates 1 classes due to The sportarray.Dummy.Types.List3d has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(sportarray;Dummy;Types;List3d;init;,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List3d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.Dummy.Types.List3d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.Dummy.Values...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy.Values[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.Dummy.Values)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.Dummy.Values,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(dblVals2d,[Default]), UsedName(finalize,[Default]), UsedName(Values,[Default]), UsedName(ints3d,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(dbl1d,[Default]), UsedName(bl3d,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(dbl3d,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(dbl4d,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(dblVals1d,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dbl2d,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(dblVals4d,[Default]), UsedName(intsVals3d,[Default]), UsedName(dblVals3d,[Default]), UsedName(blVals3d,[Default]))) invalidates 1 classes due to The sportarray.Dummy.Values has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(dblVals2d,[Default]), UsedName(finalize,[Default]), UsedName(Values,[Default]), UsedName(ints3d,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(dbl1d,[Default]), UsedName(bl3d,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(dbl3d,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(dbl4d,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(dblVals1d,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dbl2d,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(dblVals4d,[Default]), UsedName(intsVals3d,[Default]), UsedName(dblVals3d,[Default]), UsedName(blVals3d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.Dummy.Values)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.ArraySpec.Current...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.ArraySpec.Current[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.ArraySpec.Current)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.ArraySpec.Current,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(Current,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(name,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))) invalidates 1 classes due to The euismod.ArraySpec.Current has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName(Current,[Default]), UsedName($isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(name,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.ArraySpec.Current)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.Dummy.Types.List4d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.Dummy.Types.List4d[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.Dummy.Types.List4d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.Dummy.Types.List4d,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(List4d,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(euismod;Dummy;Types;List4d;init;,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]))) invalidates 1 classes due to The euismod.Dummy.Types.List4d has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(List4d,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(euismod;Dummy;Types;List4d;init;,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.Dummy.Types.List4d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sportarray.Dummy.IsArrayImplicits...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sportarray.Dummy.IsArrayImplicits[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sportarray.Dummy.IsArrayImplicits)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sportarray.Dummy.IsArrayImplicits,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(notifyAll,[Default]), UsedName(list2dIsArray,[Implicit]), UsedName(eq,[Default]), UsedName(IsArrayImplicits,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(list1dIsArray,[Implicit]), UsedName(equals,[Default]), UsedName(list4dIsArray,[Implicit]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(list3dIsArray,[Implicit]), UsedName(##,[Default]), UsedName(wait,[Default]))) invalidates 1 classes due to The sportarray.Dummy.IsArrayImplicits has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(list2dIsArray,[Implicit]), UsedName(list1dIsArray,[Implicit]), UsedName(list4dIsArray,[Implicit]), UsedName(list3dIsArray,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sportarray.Dummy.IsArrayImplicits)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.Dummy.IsArrayImplicits...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.Dummy.IsArrayImplicits[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.Dummy.IsArrayImplicits)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.Dummy.IsArrayImplicits,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(S,[Default]), UsedName(notifyAll,[Default]), UsedName(list2dIsArray,[Implicit]), UsedName(eq,[Default]), UsedName(IsArrayImplicits,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(list1dIsArray,[Implicit]), UsedName(equals,[Default]), UsedName(list4dIsArray,[Implicit]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(list3dIsArray,[Implicit]), UsedName(##,[Default]), UsedName(wait,[Default]))) invalidates 1 classes due to The euismod.Dummy.IsArrayImplicits has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(list2dIsArray,[Implicit]), UsedName(list1dIsArray,[Implicit]), UsedName(list4dIsArray,[Implicit]), UsedName(list3dIsArray,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.Dummy.IsArrayImplicits)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from euismod.Dummy.Types.List2d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: euismod.Dummy.Types.List2d[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(euismod.Dummy.Types.List2d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(euismod.Dummy.Types.List2d,ModifiedNames(changes = UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(euismod;Dummy;Types;List2d;init;,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List2d,[Default]))) invalidates 1 classes due to The euismod.Dummy.Types.List2d has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(apply,[Default]), UsedName(productElement,[Default]), UsedName(notifyAll,[Default]), UsedName(euismod;Dummy;Types;List2d;init;,[Default]), UsedName(eq,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(!=,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(data,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName($init$,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(unapply,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(toString,[Default]), UsedName(synchronized,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notify,[Default]), UsedName(##,[Default]), UsedName(wait,[Default]), UsedName(List2d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(euismod.Dummy.Types.List2d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
